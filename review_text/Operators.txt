Semantics: Operators

Arithmetic Operators
	a + b	Addition	| Sum of a and b
	a - b	Subtraction	| Difference of a and b
	a * b	Multiplication	| Product of a and b
	a / b	True division	| Quotient of a and b
	a // b	Floor division	| Quotient of a and b, removing fractional parts
	a % b	Modulus	Integer | remainder after division of a by b
	a ** b	Exponentiation	| a raised to the power of b
	-a	Negation	| The negative of a
	+a	Unary plus	| a unchanged (rarely used)
	a @ b	matrix product  | matrix product

Bitwise Operators 
	a & b	Bitwise AND	| Bits defined in both a and b
	a | b	Bitwise OR	| Bits defined in a or b or both
	a ^ b	Bitwise XOR	| Bits defined in a or b but not both
	a << b	Bit shift left	| Shift bits of a left by b units
	a >> b	Bit shift right	| Shift bits of a right by b units
	~a	Bitwise NOT	| Bitwise negation of a
	Note: these makes sense only in binary and we can see theses using bin()
		bin(10) prints '0b1010'	

Assignment operators
	we use "+" to mean assignment and we can augment operators for a shorthand 
		ex: a = a + 1 is the same as a += 1
		------------------------------
		a += b	a -= b	a *= b	a /= b
		a //= b	a %= b	a **= b	a &= b
		a |= b	a ^= b	a <<= b	a >>= b

Comparison operator
	a == b	a equal to b			| a != b	a not equal to b
	a < b	a less than b			| a > b	a greater than b
	a <= b	a less than or equal to b 	| a >= b	a greater than or equal to b

Boolean operations
	these include "and", "or", "not"
	xor is not included since it can be constructed with the other operators 
		ex: we can also do xor this way
			# (x > 1) xor (x < 10)
			(x > 1) != (x < 10)

Identity and membership operators
	a is b		| True if a and b are identical objects
	a is not b	| True if a and b are not identical objects
	a in b		| True if a is a member of b
	a not in b	| True if a is not a member of b

	The identity operators, "is" and "is not" check for object identity. Object identity is different than equality, as we can see here:
		ex: this is an identical object
			a = [1, 2, 3]
			b = a
			a is b

		ex: this is equality
			a = [1, 2, 3]
			b = [1, 2, 3]
			a == b

	Membership operators check for membership within compound objects. So, for example, we can write:
		ex: 
			1 in [1, 2, 3]		
				True
			2 not in [1, 2, 3]
				False















